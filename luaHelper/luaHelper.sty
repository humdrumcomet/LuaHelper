\ProvidesPackage{luaHelper}
\RequirePackage{luacode}
\RequirePackage{siunitx}

\directlua{
    local sourcefile = kpse.find_file('luaHelper.sty')
    local packagePath = string.match(sourcefile, '(.*/)')
    import = require(packagePath..'luaHelper')
}
\newcommand\luVal[2][empty]{%
    \directlua{
        local optsTable = optsToTable([[#1]])
        tex.sprint(formatNum(#2,#1))
    }%
}
\newcommand\siluVal[3][empty]{%
    \SI{\directlua{
        local optsTable = optsToTable([[#1]])
        tex.sprint(formatNum(#2,optsTable))
    }}{#3}%
}
\newcommand\printLuaTable[2][empty]{
    \directlua{
        local optsTable = optsToTable([[#1]])
        print(optsTable.kind)
        if optsTable.kind == 'py' then
            print('in kind------------')
            optsTable.wrap = optsTable.wrap or 'itPyObj'
            pyStr = "#2"
            print(pyStr)
            printTable(pySlice(pyStr), optsTable)
        else
            printTable(#2, optsTable)
        end
    }
}
